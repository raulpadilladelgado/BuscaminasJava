/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package MiBuscaminas;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

/**
 *
 * @author Pady
 */
public class VentantaPrincipal extends javax.swing.JFrame implements ActionListener {

    boolean error = false;

    Cuadro[][] cuadros = new Cuadro[13][12];

    int contadorLibres = 0;

    int contadorMinas = 0;

    /**
     * Creates new form VentantaPrincipal
     */
    public VentantaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        cantidadLibres = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cantidadMinas = new javax.swing.JLabel();
        panel_juego = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Numero de casillas libres:");

        cantidadLibres.setText("0");

        jLabel2.setText("Numero de minas:");

        cantidadMinas.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cantidadLibres))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cantidadMinas)))
                .addContainerGap(234, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cantidadMinas))
                .addGap(3, 3, 3)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cantidadLibres))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panel_juegoLayout = new javax.swing.GroupLayout(panel_juego);
        panel_juego.setLayout(panel_juegoLayout);
        panel_juegoLayout.setHorizontalGroup(
            panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panel_juegoLayout.setVerticalGroup(
            panel_juegoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 284, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(panel_juego, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_juego, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentantaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentantaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentantaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentantaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentantaPrincipal().setVisible(true);
            }
        });
    }

    public void iniciar() {
        jPanel1.setBackground(Color.black);
        panel_juego.setBackground(Color.BLACK);
        jLabel1.setForeground(Color.white);
        jLabel2.setForeground(Color.white);
        cantidadLibres.setForeground(Color.WHITE);
        cantidadMinas.setForeground(Color.white);
        int contador = 0;
        contadorLibres = 0;
        contadorMinas = 0;
        this.setSize(700, 700);
        int resultado = 0;
        panel_juego.setLayout(new java.awt.GridLayout(13, 12));
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 12; j++) {
                Cuadro nuevo = new Cuadro(contador);
                contador++;
                if (nuevo.isMina() == false) {
                    contadorLibres++;
                } else {
                    contadorMinas++;
                }
                nuevo.addActionListener(this);
                nuevo.setVisible(true);
                cuadros[i][j] = nuevo;
                panel_juego.add(nuevo);
            }
        }
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 12; j++) {
                resultado = calcularProximidad(i, j);
                cuadros[i][j].setProximidad(resultado);
            }
        }
        cantidadLibres.setText(Integer.toString(contadorLibres));
        cantidadMinas.setText(Integer.toString(contadorMinas));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel cantidadLibres;
    private javax.swing.JLabel cantidadMinas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panel_juego;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent e) {
        Cuadro nuevo;
        nuevo = (Cuadro) e.getSource();
        if (nuevo.isMina() == true) {
            nuevo.setBackground(Color.red);
            nuevo.setIcon(new ImageIcon("1200x630bb2.jpg"));
            jPanel1.setBackground(Color.red);
            JOptionPane.showMessageDialog(null, "HAZ ELEGIDO UN CUADRO MINADO", "HAS PERDIDO", JOptionPane.WARNING_MESSAGE);
            for (int i = 0; i < 13; i++) {
                for (int j = 0; j < 12; j++) {
                    cuadros[i][j] = null;
                }
            }
            panel_juego.removeAll();
            panel_juego.setVisible(false);
            iniciar();
            panel_juego.setVisible(true);
        } else {

            if ("".equals(nuevo.getText())) {
                int proximidad = nuevo.getProximidad();
                nuevo.setBackground(Color.black);
                nuevo.setEnabled(false);
                nuevo.setText(Integer.toString(proximidad));
                contadorLibres--;
                cantidadLibres.setText(Integer.toString(contadorLibres));
                nuevo.setText(Integer.toString(proximidad));
                if (proximidad == 0) {
                    for (int i = 0; i < 13; i++) {
                        for (int j = 0; j < 12; j++) {
                            if (nuevo.getId() == cuadros[i][j].getId()) {
                                destaparCeros(i, j);
                            }
                        }
                    }

                }
                panel_juego.removeAll();
                panel_juego.setLayout(new java.awt.GridLayout(13, 12));
                for (int i = 0; i < 13; i++) {
                    for (int j = 0; j < 12; j++) {
                        panel_juego.add(cuadros[i][j]);
                    }
                }
            }
            if (contadorLibres == 0) {
                jPanel1.setBackground(Color.GREEN);
                JOptionPane.showMessageDialog(null, "HAZ DESTAPADO TODOS LOS CUADROS LIBRES", "HAS GANADO", JOptionPane.DEFAULT_OPTION);
                for (int i = 0; i < 13; i++) {
                    for (int j = 0; j < 12; j++) {
                        cuadros[i][j] = null;
                    }
                }
                panel_juego.removeAll();
                panel_juego.setVisible(false);
                iniciar();
                panel_juego.setVisible(true);
            }
        }
    }

    private int calcularProximidad(int y, int x) {
        int proximidad = 0;
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 12; j++) {
                if (i == y - 1 && j == x - 1 && cuadros[i][j].isMina() == true) {
                    proximidad++;
                }
                if (i == y - 1 && j == x && cuadros[i][j].isMina() == true) {
                    proximidad++;
                }
                if (i == y - 1 && j == x + 1 && cuadros[i][j].isMina() == true) {
                    proximidad++;
                }
                if (i == y && j == x - 1 && cuadros[i][j].isMina() == true) {
                    proximidad++;
                }
                if (i == y && j == x + 1 && cuadros[i][j].isMina() == true) {
                    proximidad++;
                }
                if (i == y + 1 && j == x - 1 && cuadros[i][j].isMina() == true) {
                    proximidad++;
                }
                if (i == y + 1 && j == x && cuadros[i][j].isMina() == true) {
                    proximidad++;
                }
                if (i == y + 1 && j == x + 1 && cuadros[i][j].isMina() == true) {
                    proximidad++;
                }
            }
        }
        return proximidad;
    }

    private void destaparCeros(int y, int x) {
        for (int i = 0; i < 13; i++) {
            for (int j = 0; j < 12; j++) {
                if (i == y - 1 && j == x - 1 && "".equals(cuadros[i][j].getText())) {
                    cuadros[i][j].setBackground(Color.black);
                
                cuadros[i][j].setEnabled(false);
                    cuadros[i][j].setText(Integer.toString(cuadros[i][j].getProximidad()));
                    contadorLibres--;
                    if (cuadros[i][j].getProximidad() == 0) {
                        destaparCeros(i, j);
                    }

                }
                if (i == y - 1 && j == x && "".equals(cuadros[i][j].getText())) {
                    cuadros[i][j].setBackground(Color.black);
                
                cuadros[i][j].setEnabled(false);
                    cuadros[i][j].setText(Integer.toString(cuadros[i][j].getProximidad()));
                    contadorLibres--;
                    if (cuadros[i][j].getProximidad() == 0) {
                        destaparCeros(i, j);
                    }
                }
                if (i == y - 1 && j == x + 1 && "".equals(cuadros[i][j].getText())) {
                    cuadros[i][j].setBackground(Color.black);
                
                cuadros[i][j].setEnabled(false);
                    cuadros[i][j].setText(Integer.toString(cuadros[i][j].getProximidad()));
                    contadorLibres--;
                    if (cuadros[i][j].getProximidad() == 0) {
                        destaparCeros(i, j);
                    }
                }
                if (i == y && j == x - 1 && "".equals(cuadros[i][j].getText())) {
                    cuadros[i][j].setBackground(Color.black);
                
                cuadros[i][j].setEnabled(false);
                    cuadros[i][j].setText(Integer.toString(cuadros[i][j].getProximidad()));
                    contadorLibres--;
                    if (cuadros[i][j].getProximidad() == 0) {
                        destaparCeros(i, j);
                    }
                }
                if (i == y && j == x + 1 && "".equals(cuadros[i][j].getText())) {
                    cuadros[i][j].setBackground(Color.black);
                
                cuadros[i][j].setEnabled(false);
                    cuadros[i][j].setText(Integer.toString(cuadros[i][j].getProximidad()));
                    contadorLibres--;
                    if (cuadros[i][j].getProximidad() == 0) {
                        destaparCeros(i, j);
                    }
                }
                if (i == y + 1 && j == x - 1 && "".equals(cuadros[i][j].getText())) {
                    cuadros[i][j].setBackground(Color.black);
                
                cuadros[i][j].setEnabled(false);
                    cuadros[i][j].setText(Integer.toString(cuadros[i][j].getProximidad()));
                    contadorLibres--;
                    if (cuadros[i][j].getProximidad() == 0) {
                        destaparCeros(i, j);
                    }
                }
                if (i == y + 1 && j == x && "".equals(cuadros[i][j].getText())) {
                    cuadros[i][j].setBackground(Color.black);
                
                cuadros[i][j].setEnabled(false);
                    cuadros[i][j].setText(Integer.toString(cuadros[i][j].getProximidad()));
                    contadorLibres--;
                    if (cuadros[i][j].getProximidad() == 0) {
                        destaparCeros(i, j);
                    }
                }
                if (i == y + 1 && j == x + 1 && "".equals(cuadros[i][j].getText())) {
                    cuadros[i][j].setBackground(Color.black);
                
                cuadros[i][j].setEnabled(false);
                    cuadros[i][j].setText(Integer.toString(cuadros[i][j].getProximidad()));
                    contadorLibres--;
                    if (cuadros[i][j].getProximidad() == 0) {
                        destaparCeros(i, j);
                    }
                }
            }
        }
        cantidadLibres.setText(Integer.toString(contadorLibres));
    }
}
